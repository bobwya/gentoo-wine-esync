--- a/0024-server-ntdll-Also-wait-on-the-queue-fd-when-waiting-.patch	2018-10-07 03:47:11.000000000 +0100
+++ b/0024-server-ntdll-Also-wait-on-the-queue-fd-when-waiting-.patch	2019-04-28 17:53:47.153442259 +0100
@@ -3,15 +3,12 @@
 Date: Sat, 9 Jun 2018 14:44:54 -0500
 Subject: [PATCH 24/83] server, ntdll: Also wait on the queue fd when waiting
  for driver events.
-
 Normally the server handles this, by polling on the fd during its main loop.
 The problem there is that the server only polls when the thread is waiting
 for messages. We want to replicate that behaviour, otherwise wineserver spins
 forever trying to wake up a thread that just doesn't care.
-
 With this patch, I'm finally able to interact with winecfg. Next step is to
 fix the 'drives' tab.
-
 Signed-off-by: Zebediah Figura <z.figura12@gmail.com>
 ---
  dlls/ntdll/esync.c             | 44 ++++++++++++++++++++++++++++++------------
@@ -26,7 +23,6 @@
  server/thread.c                |  5 +++--
  server/trace.c                 |  7 ++++++-
  11 files changed, 80 insertions(+), 26 deletions(-)
-
 diff --git a/dlls/ntdll/esync.c b/dlls/ntdll/esync.c
 index c4faf69..cb206bc 100644
 --- a/dlls/ntdll/esync.c
@@ -105,13 +101,13 @@
          FIXME("Can't wait on esync and server objects at the same time!\n");
 @@ -491,6 +496,9 @@ NTSTATUS esync_wait_objects( DWORD count, const HANDLE *handles, BOOLEAN wait_an
          for (i = 0; i < count; i++)
-             DPRINTF(" %p", handles[i]);
+             TRACE(" %p", handles[i]);
  
 +        if (msgwait)
-+            DPRINTF(" or driver events (fd %d)", ntdll_get_thread_data()->esync_queue_fd);
++            TRACE(" or driver events (fd %d)", ntdll_get_thread_data()->esync_queue_fd);
 +
          if (!timeout)
-             DPRINTF(", timeout = INFINITE.\n");
+             TRACE(", timeout = INFINITE.\n");
          else
 @@ -508,10 +516,16 @@ NTSTATUS esync_wait_objects( DWORD count, const HANDLE *handles, BOOLEAN wait_an
              fds[i].fd = objs[i] ? objs[i]->fd : -1;
@@ -166,14 +162,6 @@
  };
  
  
-@@ -6564,6 +6575,6 @@ union generic_reply
-     struct get_esync_fd_reply get_esync_fd_reply;
- };
- 
--#define SERVER_PROTOCOL_VERSION 566
-+#define SERVER_PROTOCOL_VERSION 567
- 
- #endif /* __WINE_WINE_SERVER_PROTOCOL_H */
 diff --git a/server/esync.c b/server/esync.c
 index 4682163..ef02170 100644
 --- a/server/esync.c
@@ -253,7 +241,7 @@
 --- a/server/process.c
 +++ b/server/process.c
 @@ -65,7 +65,7 @@ static int process_signaled( struct object *obj, struct wait_queue_entry *entry
- static unsigned int process_map_access( struct object *obj, unsigned int access );
+ static struct security_descriptor *process_get_sd( struct object *obj );
  static void process_poll_event( struct fd *fd, int event );
  static void process_destroy( struct object *obj );
 -static int process_get_esync_fd( struct object *obj );
@@ -277,7 +265,7 @@
 index 5defc73..2cae53b 100644
 --- a/server/protocol.def
 +++ b/server/protocol.def
-@@ -3865,4 +3865,14 @@ struct handle_info
+@@ -3978,7 +3978,17 @@ struct handle_info
  @REQ(get_esync_fd)
      obj_handle_t handle;        /* handle to the object */
  @REPLY
@@ -292,6 +280,9 @@
 +    ESYNC_MANUAL_SERVER,
 +    ESYNC_QUEUE,
 +};
+ 
+ 
+ /* Return system information values */
 diff --git a/server/queue.c b/server/queue.c
 index df327cf..f883ed9 100644
 --- a/server/queue.c
@@ -336,8 +327,8 @@
 --- a/server/thread.c
 +++ b/server/thread.c
 @@ -131,7 +131,7 @@ static const struct object_ops thread_apc_ops =
- 
  static void dump_thread( struct object *obj, int verbose );
+ static struct object_type *thread_get_type( struct object *obj );
  static int thread_signaled( struct object *obj, struct wait_queue_entry *entry );
 -static int thread_get_esync_fd( struct object *obj );
 +static int thread_get_esync_fd( struct object *obj, enum esync_type *type );
@@ -345,7 +336,7 @@
  static void thread_poll_event( struct fd *fd, int event );
  static void destroy_thread( struct object *obj );
 @@ -378,9 +378,10 @@ static int thread_signaled( struct object *obj, struct wait_queue_entry *entry )
-     return (mythread->state == TERMINATED);
+     return (mythread->state == TERMINATED && !mythread->exit_poll);
  }
  
 -static int thread_get_esync_fd( struct object *obj )
@@ -383,4 +374,3 @@
  static const char * const req_names[REQ_NB_REQUESTS] = {
 -- 
 2.7.4
-
