--- a/0020-server-Create-eventfd-file-descriptors-for-thread-ob.patch	2018-11-01 17:19:43.000000000 +0000
+++ b/0020-server-Create-eventfd-file-descriptors-for-thread-ob.patch	2020-04-29 20:41:36.042348203 +0100
@@ -15,8 +15,8 @@
 --- a/server/thread.c
 +++ b/server/thread.c
 @@ -131,6 +131,7 @@ static const struct object_ops thread_apc_ops =
- 
  static void dump_thread( struct object *obj, int verbose );
+ static struct object_type *thread_get_type( struct object *obj );
  static int thread_signaled( struct object *obj, struct wait_queue_entry *entry );
 +static int thread_get_esync_fd( struct object *obj );
  static unsigned int thread_map_access( struct object *obj, unsigned int access );
@@ -36,9 +36,9 @@
      thread->desktop_users   = 0;
      thread->token           = NULL;
 +    thread->esync_fd        = -1;
- 
-     thread->creation_time = current_time;
-     thread->exit_time     = 0;
+     thread->exit_poll       = NULL;
+     thread->shm_fd          = -1;
+     thread->shm             = NULL;
 @@ -286,6 +288,9 @@ struct thread *create_thread( int fd, struct process *process, const struct secu
          return NULL;
      }
@@ -50,7 +50,7 @@
      add_process_thread( thread->process, thread );
      return thread;
 @@ -352,6 +357,9 @@ static void destroy_thread( struct object *obj )
-     release_object( thread->process );
+     if (thread->exit_poll) remove_timeout_user( thread->exit_poll );
      if (thread->id) free_ptid( thread->id );
      if (thread->token) release_object( thread->token );
 +
@@ -60,7 +60,7 @@
  
  /* dump a thread on stdout for debugging purposes */
 @@ -370,6 +378,12 @@ static int thread_signaled( struct object *obj, struct wait_queue_entry *entry )
-     return (mythread->state == TERMINATED);
+     return (mythread->state == TERMINATED && !mythread->exit_poll);
  }
  
 +static int thread_get_esync_fd( struct object *obj )
@@ -81,9 +81,9 @@
      timeout_t              exit_time;     /* Thread exit time */
      struct token          *token;         /* security token associated with this thread */
 +    int                    esync_fd;      /* esync file descriptor (signalled on exit) */
- };
- 
- struct thread_snapshot
+     struct timeout_user   *exit_poll;     /* poll if the thread/process has exited already */
+     int                    shm_fd;        /* file descriptor for thread local shared memory */
+     shmlocal_t            *shm;           /* thread local shared memory pointer */
 -- 
 2.19.1
 
