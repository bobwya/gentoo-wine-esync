--- a/0024-server-ntdll-Also-wait-on-the-queue-fd-when-waiting-.patch	2018-11-01 17:19:43.000000000 +0000
+++ b/0024-server-ntdll-Also-wait-on-the-queue-fd-when-waiting-.patch	2020-04-29 20:41:36.862344982 +0100
@@ -105,13 +105,13 @@
          FIXME("Can't wait on esync and server objects at the same time!\n");
 @@ -491,6 +496,9 @@ NTSTATUS esync_wait_objects( DWORD count, const HANDLE *handles, BOOLEAN wait_an
          for (i = 0; i < count; i++)
-             DPRINTF(" %p", handles[i]);
+             TRACE(" %p", handles[i]);
  
 +        if (msgwait)
-+            DPRINTF(" or driver events (fd %d)", ntdll_get_thread_data()->esync_queue_fd);
++            TRACE(" or driver events (fd %d)", ntdll_get_thread_data()->esync_queue_fd);
 +
          if (!timeout)
-             DPRINTF(", timeout = INFINITE.\n");
+             TRACE(", timeout = INFINITE.\n");
          else
 @@ -508,10 +516,16 @@ NTSTATUS esync_wait_objects( DWORD count, const HANDLE *handles, BOOLEAN wait_an
              fds[i].fd = objs[i] ? objs[i]->fd : -1;
@@ -245,7 +245,7 @@
 --- a/server/process.c
 +++ b/server/process.c
 @@ -65,7 +65,7 @@ static int process_signaled( struct object *obj, struct wait_queue_entry *entry
- static unsigned int process_map_access( struct object *obj, unsigned int access );
+ static struct security_descriptor *process_get_sd( struct object *obj );
  static void process_poll_event( struct fd *fd, int event );
  static void process_destroy( struct object *obj );
 -static int process_get_esync_fd( struct object *obj );
@@ -269,7 +269,7 @@
 index 250590573e..6ef953303b 100644
 --- a/server/protocol.def
 +++ b/server/protocol.def
-@@ -3870,4 +3870,14 @@ struct handle_info
+@@ -3983,7 +3983,17 @@ struct handle_info
  @REQ(get_esync_fd)
      obj_handle_t handle;        /* handle to the object */
  @REPLY
@@ -284,6 +284,9 @@
 +    ESYNC_MANUAL_SERVER,
 +    ESYNC_QUEUE,
 +};
+ 
+ 
+ /* Return system information values */
 diff --git a/server/queue.c b/server/queue.c
 index 1a5bbc7e8c..b9aa4bc530 100644
 --- a/server/queue.c
@@ -328,8 +331,8 @@
 --- a/server/thread.c
 +++ b/server/thread.c
 @@ -131,7 +131,7 @@ static const struct object_ops thread_apc_ops =
- 
  static void dump_thread( struct object *obj, int verbose );
+ static struct object_type *thread_get_type( struct object *obj );
  static int thread_signaled( struct object *obj, struct wait_queue_entry *entry );
 -static int thread_get_esync_fd( struct object *obj );
 +static int thread_get_esync_fd( struct object *obj, enum esync_type *type );
@@ -337,7 +340,7 @@
  static void thread_poll_event( struct fd *fd, int event );
  static void destroy_thread( struct object *obj );
 @@ -378,9 +378,10 @@ static int thread_signaled( struct object *obj, struct wait_queue_entry *entry )
-     return (mythread->state == TERMINATED);
+     return mythread->state == TERMINATED && !mythread->exit_poll;
  }
  
 -static int thread_get_esync_fd( struct object *obj )
