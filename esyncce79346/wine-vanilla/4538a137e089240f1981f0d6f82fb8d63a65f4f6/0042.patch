--- a/0042-ntdll-Use-shared-memory-segments-to-store-semaphore-.patch	2018-11-01 17:19:43.000000000 +0000
+++ b/0042-ntdll-Use-shared-memory-segments-to-store-semaphore-.patch	2019-12-19 12:30:42.624515643 +0000
@@ -1,22 +1,19 @@
-From 56864692e4ed8f588a5dcee931e70fe6da0a1920 Mon Sep 17 00:00:00 2001
+From 74673086285abb335d58cecf4327bf08034210a6 Mon Sep 17 00:00:00 2001
 From: Zebediah Figura <z.figura12@gmail.com>
 Date: Mon, 11 Jun 2018 13:10:36 -0500
-Subject: [PATCH 42/83] ntdll: Use shared memory segments to store semaphore
- and mutex state.
-
+Subject: [PATCH] ntdll: Use shared memory segments to store semaphore and
+ mutex state.
 This patch is pretty big, because it restructures the underlying esync
 objects. Instead of wrapping a struct esync, the semaphore and mutex structs
 are now contained within it, as a pointer to shared memory. This also means
 that we can move a lot of common code to create_esync() and open_esync()
 since now we don't have to allocate separate structures.
-
 Signed-off-by: Zebediah Figura <z.figura12@gmail.com>
 ---
  dlls/ntdll/esync.c  | 349 +++++++++++++++++++-------------------------
  dlls/ntdll/esync.h  |   1 +
- dlls/ntdll/thread.c |   4 +
+ dlls/ntdll/loader.c |   4 +
  3 files changed, 155 insertions(+), 199 deletions(-)
-
 diff --git a/dlls/ntdll/esync.c b/dlls/ntdll/esync.c
 index 6409678e55..6a54405488 100644
 --- a/dlls/ntdll/esync.c
@@ -657,28 +654,27 @@
  extern NTSTATUS esync_close( HANDLE handle ) DECLSPEC_HIDDEN;
  
  extern NTSTATUS esync_create_semaphore(HANDLE *handle, ACCESS_MASK access,
-diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
-index 12124a054c..3fd50e5065 100644
---- a/dlls/ntdll/thread.c
-+++ b/dlls/ntdll/thread.c
-@@ -45,6 +45,7 @@
+diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
+index 9972d680e..f9c529357 100644
+--- a/dlls/ntdll/loader.c
++++ b/dlls/ntdll/loader.c
+@@ -44,6 +44,7 @@
+ #include "wine/server.h"
  #include "ntdll_misc.h"
  #include "ddk/wdm.h"
- #include "wine/exception.h"
 +#include "esync.h"
  
- WINE_DEFAULT_DEBUG_CHANNEL(thread);
- 
-@@ -401,6 +402,9 @@ void thread_init(void)
- 
-     fill_cpu_info();
+ WINE_DEFAULT_DEBUG_CHANNEL(module);
+ WINE_DECLARE_DEBUG_CHANNEL(relay);
+@@ -4246,6 +4247,9 @@ void __wine_process_init(void)
+     peb->ProcessHeap = RtlCreateHeap( HEAP_GROWABLE, NULL, 0, 0, NULL, NULL );
+     peb->LoaderLock = &loader_section;
  
 +    if (do_esync())
 +        esync_init();
 +
-     NtCreateKeyedEvent( &keyed_event, GENERIC_READ | GENERIC_WRITE, NULL, 0 );
- }
- 
+     init_unix_codepage();
+     init_directories();
+     init_user_process_params( info_size );
 -- 
-2.19.1
-
+2.23.0
